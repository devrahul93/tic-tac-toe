{"version":3,"sources":["components/Icon.js","App.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAgBeA,EAZF,SAAC,GACX,OADsB,EAAVC,MAER,IAAK,SACD,OAAO,cAAC,IAAD,CAAaC,UAAU,SACjC,IAAK,QACD,OAAO,cAAC,IAAD,CAASA,UAAU,SAC9B,QACI,OAAO,cAAC,IAAD,CAAOA,UAAU,W,+DCC9BC,G,YAAY,IAAIC,MAAM,GAAGC,KAAK,UA+GrBC,EA7GH,WAEV,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KA2DMC,EAAa,SAACC,GAClB,OAAIH,EACKI,YAAMJ,EAAY,CAAEK,KAAM,YAEL,UAA1BZ,EAAUU,GAILC,YAAM,iBAAkB,CAAEC,KAAM,WAHvCZ,EAAUU,GAAcL,EAAU,QAAU,SAC5CC,GAAYD,QAxDZL,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAEbA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,IAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,aAiBjB,OACE,eAACa,EAAA,EAAD,CAAWd,UAAU,MAArB,UACE,cAAC,IAAD,CAAgBe,SAAS,kBACzB,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAKC,GAAI,EAAGlB,UAAU,cAAtB,UACGQ,EACC,sBAAKR,UAAU,YAAf,UACE,oBAAIA,UAAU,0CAAd,SACGQ,IAEH,cAACW,EAAA,EAAD,CAAQC,MAAM,UAAUC,OAAK,EAACC,QAhFvB,WACjBf,GAAW,GACXE,EAAc,IACdR,EAAUE,KAAK,QAAS,EAAG,IA6EjB,gCAKF,qBAAIH,UAAU,2BAAd,UACGM,EAAU,QAAU,SADvB,YAIF,qBAAKN,UAAU,OAAf,SACGC,EAAUsB,KAAI,SAACC,EAAMC,GAAP,OACb,cAACC,EAAA,EAAD,CAAMN,MAAM,UAAUE,QAAS,kBAAMZ,EAAWe,IAAhD,SACE,cAACE,EAAA,EAAD,CAAU3B,UAAU,MAApB,SACE,cAAC,EAAD,CAAMD,KAAMyB,sBC1G9BI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.79da764c.chunk.js","sourcesContent":["import React from 'react'\r\nimport {FaTimes,FaPen,FaRegCircle} from 'react-icons/fa'\r\n\r\n\r\nconst Icon = ({name}) => {\r\n   switch (name) {\r\n       case 'circle':\r\n           return <FaRegCircle className=\"icon\"/>\r\n        case 'cross':\r\n            return <FaTimes className=\"icon\"/>\r\n        default:\r\n            return <FaPen className=\"icon\"/>\r\n           \r\n             }\r\n}\r\n\r\nexport default Icon\r\n\r\n","import React, { useState } from 'react'\nimport Icon from './components/Icon'\n\n// toastify import\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\n\n//bootstrap import\nimport { Card, CardBody, Container, Button, Col, Row } from 'reactstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport './App.css'\nconst itemArray = new Array(9).fill('empty')\n\nconst App = () => {\n  //usestate\n  const [isCross, setIsCross] = useState(false)\n  const [winMessage, setWinMessage] = useState('')\n\n  const reloadGame = () => {\n    setIsCross(false)\n    setWinMessage('')\n    itemArray.fill('empty', 0, 9)\n  }\n  const checkIsWinner = () => {\n    if (\n      itemArray[0] === itemArray[1] &&\n      itemArray[0] === itemArray[2] &&\n      itemArray[0] !== 'empty'\n    ) {\n      setWinMessage(`${itemArray[0]} wins`)\n    } else if (\n      itemArray[3] === itemArray[4] &&\n      itemArray[3] === itemArray[5] &&\n      itemArray[3] !== 'empty'\n    ) {\n      setWinMessage(`${itemArray[3]} wins`)\n    } else if (\n      itemArray[6] === itemArray[7] &&\n      itemArray[6] === itemArray[8] &&\n      itemArray[6] !== 'empty'\n    ) {\n      setWinMessage(`${itemArray[6]} wins`)\n    } else if (\n      itemArray[0] === itemArray[3] &&\n      itemArray[0] === itemArray[6] &&\n      itemArray[0] !== 'empty'\n    ) {\n      setWinMessage(`${itemArray[0]} wins`)\n    } else if (\n      itemArray[1] === itemArray[4] &&\n      itemArray[1] === itemArray[7] &&\n      itemArray[1] !== 'empty'\n    ) {\n      setWinMessage(`${itemArray[1]} wins`)\n    } else if (\n      itemArray[2] === itemArray[5] &&\n      itemArray[2] === itemArray[8] &&\n      itemArray[2] !== 'empty'\n    ) {\n      setWinMessage(`${itemArray[2]} wins`)\n    } else if (\n      itemArray[0] === itemArray[4] &&\n      itemArray[0] === itemArray[8] &&\n      itemArray[0] !== 'empty'\n    ) {\n      setWinMessage(`${itemArray[0]} wins`)\n    } else if (\n      itemArray[2] === itemArray[4] &&\n      itemArray[2] === itemArray[6] &&\n      itemArray[2] !== 'empty'\n    ) {\n      setWinMessage(`${itemArray[2]} wins`)\n    }\n  }\n\n  const changeItem = (itemNumber) => {\n    if (winMessage) {\n      return toast(winMessage, { type: 'success' })\n    }\n    if (itemArray[itemNumber] === 'empty') {\n      itemArray[itemNumber] = isCross ? 'cross' : 'circle'\n      setIsCross(!isCross)\n    } else {\n      return toast('already filled', { type: 'error' })\n    }\n    checkIsWinner()\n  }\n\n  return (\n    <Container className='p-5'>\n      <ToastContainer position='bottom-center' />\n      <Row>\n        <Col md={6} className='offset-md-3'>\n          {winMessage ? (\n            <div className='mb-2 mt-2'>\n              <h1 className='text-success text-uppercase text-center'>\n                {winMessage}\n              </h1>\n              <Button color='success' block onClick={reloadGame}>\n                Reload the Game\n              </Button>\n            </div>\n          ) : (\n            <h1 className='text-center text-warning'>\n              {isCross ? 'Cross' : 'Circle'} turns\n            </h1>\n          )}\n          <div className='grid'>\n            {itemArray.map((item, index) => (\n              <Card color='warning' onClick={() => changeItem(index)}>\n                <CardBody className='box'>\n                  <Icon name={item} />\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}